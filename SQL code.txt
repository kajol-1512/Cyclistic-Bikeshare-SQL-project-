# Using Union All, merged all trips data from the year 2024

select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_01
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_02
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_03
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_04
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_05
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_06
union all 
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_07
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_08
union all 
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_09
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_10
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_11
union all
select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_12



# After merging the table, I saved the results, naming my table as Trips_2024_All

-----------------------------------------------------------------------------------------------------------------------------------------------
# Find total rows


select * from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_All


# results: total rows = 5860568

-----------------------------------------------------------------------------------------------------------------------------------------------
# Create a new column ride_length


UPDATE data-analysis-cyclistic.Cyclistic_trips.Trips_2024_All
SET ride_length = date_diff(ended_at, started_at, minute)
where true


# I'm extratcting ride_length in minutes 
-----------------------------------------------------------------------------------------------------------------------------------------------

# Get duplicates


select D_Trips.*
from (select Trips.*, count(*) over (partition by ride_id) as cnt
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_All as Trips
) D_Trips
where cnt > 1


# results: total duplicate rows: 211

-----------------------------------------------------------------------------------------------------------------------------------------------
# Get unique records

with new_table as
(select trips.*, Row_Number() over (partition by ride_id order by ride_id) as cnt
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_All as trips )

select * except(cnt) from new_table 
where cnt = 1


#results: total unique rows = 5860357

-----------------------------------------------------------------------------------------------------------------------------------------------
# after getting clean file, I saved the results naming my table as Trips_2024_unique_records

-----------------------------------------------------------------------------------------------------------------------------------------------

# Mean, min, max of ride_length in minutes:

select min(ride_length) as minimum, max(ride_length) as maximum, round(avg(ride_length),2) as mean
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records

# min = -2748 , max = 1559, mean = 16.82
-----------------------------------------------------------------------------------------------------------------------------------------------

# While analyzing the data, I noticed that the minimum ride length is negative, likely due to errors in the started_at and ended_at columns. After investigating started_at & ended_at columns, it appears that in about 95 records, the values may have been accidentally swappedÑeither the date or time entries are incorrect. However, this needs to be confirmed before proceeding. As this couldnÕt be verified in the fictional dataset, I removed these 95 records to ensure the further analysis is based on clean and reliable data. 

delete
FROM `data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records` 
where ride_length < 0

#results: total rows come down to 5860262

-----------------------------------------------------------------------------------------------------------------------------------------------
# Count of casual riders and members:

select member_casual, count(*) 
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
group by 1


#reults: member= 3708778 , casual = 2151484

-----------------------------------------------------------------------------------------------------------------------------------------------
# Rider's use of bike types

select rideable_type, count(*)
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
group by 1
order by 2 desc


#results: electric_bike = 2980429 , classic_bike = 2735496 & electric_scooter = 144337


 # By member

select rideable_type, count(*)
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'member'
group by 1
order by 2 desc

#results: electric_bike = 1889026 , classic_bike = 1760630 & electric_scooter = 59122


# By casual

select rideable_type, count(*)
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'casual'
group by 1
order by 2 desc


#results: electric_bike = 1091403 , classic_bike = 974866 & electric_scooter = 85215

-----------------------------------------------------------------------------------------------------------------------------------------------
# Added new column day_of week to see the trend over the weekdays and weekends:


select ride_id, started_at, extract(DAYOFWEEK FROM started_at) as day_of_week
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
order by 1 


(UPDATE data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
SET day_of_week = extract(DAYOFWEEK FROM started_at)
where true)


# Count of rides by casual riders by day_of_week:

select day_of_week, count(*)
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'casual'
group by 1
order by 2 desc

#results: top day_of_week are 7, 1, 6

# Count of rides by member riders by day_of_week:

select day_of_week, count(*)
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'member'
group by 1
order by 2 desc

#results: top day_of_week are 4,3,5
-----------------------------------------------------------------------------------------------------------------------------------------------

# mean of ride_length of members & casuals

select member_casual, round(avg(ride_length),2)
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
group by 1

#results: member = 12.28 , casual = 24.63

-----------------------------------------------------------------------------------------------------------------------------------------------
# count of riders by ride_duration

 # By Casual

select ride_length, count(*) from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'casual'
group by 1
order by 1 desc

#results: of top 4 ride_length riders: ride_length 1559 min has 13 riders , 1509 min has 1 rider , 1500 min has 6 riders and 1499 min has 5990 riders 

#By Member

select ride_length, count(*) from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'member'
group by 1
order by 1 desc

#results: of top 4 ride_length riders: ride_length 1559 min has 2 riders , 1500 min has 1 rider, 1499 min has 1393 riders and 1497 has 2 riders 

-----------------------------------------------------------------------------------------------------------------------------------------------
# Peak Time of day  

#By Member

select extract(hour FROM started_at) as start_hour, count(*) 
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'member'
group by 1
order by 2 desc

#results: peak hours for members here are 17, 16 , 18 and 8. 

# By Casual

select extract(hour FROM started_at) as start_hour, count(*) 
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'casual'
group by 1
order by 2 desc

#results: peak hours for members here are 17, 16 , 18 and 15. 

-----------------------------------------------------------------------------------------------------------------------------------------------
#station crowd  

#By Member

select start_station_name, count(*) 
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'member'
group by 1
order by 2 desc

#results: are top 4 : null = 662769,  Kingsbury St & Kinzie St = 29522, Clinton St & Washington Blvd = 27745, Clinton St & Madison St = 24893

#By Casual

select start_station_name, count(*) 
from data-analysis-cyclistic.Cyclistic_trips.Trips_2024_unique_records
where member_casual = 'casual'
group by 1
order by 2 desc

#results: are top 4 : null = 411106, Streeter Dr & Grand Ave = 51049,  DuSable Lake Shore Dr & Monroe = 34102, Michigan Ave & Oak St = 25137
